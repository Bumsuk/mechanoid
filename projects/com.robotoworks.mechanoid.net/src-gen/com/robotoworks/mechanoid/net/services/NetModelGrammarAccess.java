/*
* generated by Xtext
*/

package com.robotoworks.mechanoid.net.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class NetModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameFQNParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		
		//Model:
		//
		//	"package" packageName=FQN declarations+=Declaration*;
		public ParserRule getRule() { return rule; }

		//"package" packageName=FQN declarations+=Declaration*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageName=FQN
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//FQN
		public RuleCall getPackageNameFQNParserRuleCall_1_0() { return cPackageNameFQNParserRuleCall_1_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClientParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//
		//	UserTypeDeclaration | Client;
		public ParserRule getRule() { return rule; }

		//UserTypeDeclaration | Client
		public Alternatives getAlternatives() { return cAlternatives; }

		//UserTypeDeclaration
		public RuleCall getUserTypeDeclarationParserRuleCall_0() { return cUserTypeDeclarationParserRuleCall_0; }

		//Client
		public RuleCall getClientParserRuleCall_1() { return cClientParserRuleCall_1; }
	}

	public class ClientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Client");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBaseUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBaseUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cBaseUrlAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMethodsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethodsHttpMethodParserRuleCall_4_0 = (RuleCall)cMethodsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Client:
		//
		//	"client" name=ID baseUrl=STRING "{" methods+=HttpMethod* "}";
		public ParserRule getRule() { return rule; }

		//"client" name=ID baseUrl=STRING "{" methods+=HttpMethod* "}"
		public Group getGroup() { return cGroup; }

		//"client"
		public Keyword getClientKeyword_0() { return cClientKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//baseUrl=STRING
		public Assignment getBaseUrlAssignment_2() { return cBaseUrlAssignment_2; }

		//STRING
		public RuleCall getBaseUrlSTRINGTerminalRuleCall_2_0() { return cBaseUrlSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//methods+=HttpMethod*
		public Assignment getMethodsAssignment_4() { return cMethodsAssignment_4; }

		//HttpMethod
		public RuleCall getMethodsHttpMethodParserRuleCall_4_0() { return cMethodsHttpMethodParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class HttpMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HttpMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHttpPostParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHttpGetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHttpPutParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHttpDeleteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//HttpMethod:
		//
		//	HttpPost | HttpGet | HttpPut | HttpDelete;
		public ParserRule getRule() { return rule; }

		//HttpPost | HttpGet | HttpPut | HttpDelete
		public Alternatives getAlternatives() { return cAlternatives; }

		//HttpPost
		public RuleCall getHttpPostParserRuleCall_0() { return cHttpPostParserRuleCall_0; }

		//HttpGet
		public RuleCall getHttpGetParserRuleCall_1() { return cHttpGetParserRuleCall_1; }

		//HttpPut
		public RuleCall getHttpPutParserRuleCall_2() { return cHttpPutParserRuleCall_2; }

		//HttpDelete
		public RuleCall getHttpDeleteParserRuleCall_3() { return cHttpDeleteParserRuleCall_3; }
	}

	public class HttpPostElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HttpPost");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsParamsBlockParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBodyBlockParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Assignment cResponseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResponseResponseBlockParserRuleCall_6_0 = (RuleCall)cResponseAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//HttpPost:
		//
		//	"post" name=ID path=STRING? "{" params=ParamsBlock? body=BodyBlock? response=ResponseBlock? "}";
		public ParserRule getRule() { return rule; }

		//"post" name=ID path=STRING? "{" params=ParamsBlock? body=BodyBlock? response=ResponseBlock? "}"
		public Group getGroup() { return cGroup; }

		//"post"
		public Keyword getPostKeyword_0() { return cPostKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//path=STRING?
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//params=ParamsBlock?
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//ParamsBlock
		public RuleCall getParamsParamsBlockParserRuleCall_4_0() { return cParamsParamsBlockParserRuleCall_4_0; }

		//body=BodyBlock?
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//BodyBlock
		public RuleCall getBodyBodyBlockParserRuleCall_5_0() { return cBodyBodyBlockParserRuleCall_5_0; }

		//response=ResponseBlock?
		public Assignment getResponseAssignment_6() { return cResponseAssignment_6; }

		//ResponseBlock
		public RuleCall getResponseResponseBlockParserRuleCall_6_0() { return cResponseResponseBlockParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class HttpPutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HttpPut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsParamsBlockParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBodyBlockParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Assignment cResponseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResponseResponseBlockParserRuleCall_6_0 = (RuleCall)cResponseAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//HttpPut:
		//
		//	"put" name=ID path=STRING? "{" params=ParamsBlock? body=BodyBlock? response=ResponseBlock? "}";
		public ParserRule getRule() { return rule; }

		//"put" name=ID path=STRING? "{" params=ParamsBlock? body=BodyBlock? response=ResponseBlock? "}"
		public Group getGroup() { return cGroup; }

		//"put"
		public Keyword getPutKeyword_0() { return cPutKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//path=STRING?
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//params=ParamsBlock?
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//ParamsBlock
		public RuleCall getParamsParamsBlockParserRuleCall_4_0() { return cParamsParamsBlockParserRuleCall_4_0; }

		//body=BodyBlock?
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//BodyBlock
		public RuleCall getBodyBodyBlockParserRuleCall_5_0() { return cBodyBodyBlockParserRuleCall_5_0; }

		//response=ResponseBlock?
		public Assignment getResponseAssignment_6() { return cResponseAssignment_6; }

		//ResponseBlock
		public RuleCall getResponseResponseBlockParserRuleCall_6_0() { return cResponseResponseBlockParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class HttpGetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HttpGet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsParamsBlockParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Assignment cResponseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResponseResponseBlockParserRuleCall_5_0 = (RuleCall)cResponseAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//HttpGet:
		//
		//	"get" name=ID path=STRING? "{" params=ParamsBlock? response=ResponseBlock? "}";
		public ParserRule getRule() { return rule; }

		//"get" name=ID path=STRING? "{" params=ParamsBlock? response=ResponseBlock? "}"
		public Group getGroup() { return cGroup; }

		//"get"
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//path=STRING?
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//params=ParamsBlock?
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//ParamsBlock
		public RuleCall getParamsParamsBlockParserRuleCall_4_0() { return cParamsParamsBlockParserRuleCall_4_0; }

		//response=ResponseBlock?
		public Assignment getResponseAssignment_5() { return cResponseAssignment_5; }

		//ResponseBlock
		public RuleCall getResponseResponseBlockParserRuleCall_5_0() { return cResponseResponseBlockParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class HttpDeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HttpDelete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsParamsBlockParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Assignment cResponseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResponseResponseBlockParserRuleCall_5_0 = (RuleCall)cResponseAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//HttpDelete:
		//
		//	"delete" name=ID path=STRING? "{" params=ParamsBlock? response=ResponseBlock? "}";
		public ParserRule getRule() { return rule; }

		//"delete" name=ID path=STRING? "{" params=ParamsBlock? response=ResponseBlock? "}"
		public Group getGroup() { return cGroup; }

		//"delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//path=STRING?
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//params=ParamsBlock?
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//ParamsBlock
		public RuleCall getParamsParamsBlockParserRuleCall_4_0() { return cParamsParamsBlockParserRuleCall_4_0; }

		//response=ResponseBlock?
		public Assignment getResponseAssignment_5() { return cResponseAssignment_5; }

		//ResponseBlock
		public RuleCall getResponseResponseBlockParserRuleCall_5_0() { return cResponseResponseBlockParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ParamsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParamsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsSimpleMemberParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAmpersandKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsSimpleMemberParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		
		//ParamsBlock:
		//
		//	"params" params+=SimpleMember ("&" params+=SimpleMember)*;
		public ParserRule getRule() { return rule; }

		//"params" params+=SimpleMember ("&" params+=SimpleMember)*
		public Group getGroup() { return cGroup; }

		//"params"
		public Keyword getParamsKeyword_0() { return cParamsKeyword_0; }

		//params+=SimpleMember
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//SimpleMember
		public RuleCall getParamsSimpleMemberParserRuleCall_1_0() { return cParamsSimpleMemberParserRuleCall_1_0; }

		//("&" params+=SimpleMember)*
		public Group getGroup_2() { return cGroup_2; }

		//"&"
		public Keyword getAmpersandKeyword_2_0() { return cAmpersandKeyword_2_0; }

		//params+=SimpleMember
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//SimpleMember
		public RuleCall getParamsSimpleMemberParserRuleCall_2_1_0() { return cParamsSimpleMemberParserRuleCall_2_1_0; }
	}

	public class BodyBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodyBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBodyKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeBlockTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//BodyBlock:
		//
		//	name="body" type=BlockType;
		public ParserRule getRule() { return rule; }

		//name="body" type=BlockType
		public Group getGroup() { return cGroup; }

		//name="body"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"body"
		public Keyword getNameBodyKeyword_0_0() { return cNameBodyKeyword_0_0; }

		//type=BlockType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//BlockType
		public RuleCall getTypeBlockTypeParserRuleCall_1_0() { return cTypeBlockTypeParserRuleCall_1_0; }
	}

	public class ResponseBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResponseBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameResponseKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuperTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cSuperTypeComplexTypeDeclarationCrossReference_1_1_0 = (CrossReference)cSuperTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cSuperTypeComplexTypeDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cSuperTypeComplexTypeDeclarationCrossReference_1_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBlockTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ResponseBlock:
		//
		//	name="response" ("extends" superType=[ComplexTypeDeclaration])? type=BlockType?;
		public ParserRule getRule() { return rule; }

		//name="response" ("extends" superType=[ComplexTypeDeclaration])? type=BlockType?
		public Group getGroup() { return cGroup; }

		//name="response"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"response"
		public Keyword getNameResponseKeyword_0_0() { return cNameResponseKeyword_0_0; }

		//("extends" superType=[ComplexTypeDeclaration])?
		public Group getGroup_1() { return cGroup_1; }

		//"extends"
		public Keyword getExtendsKeyword_1_0() { return cExtendsKeyword_1_0; }

		//superType=[ComplexTypeDeclaration]
		public Assignment getSuperTypeAssignment_1_1() { return cSuperTypeAssignment_1_1; }

		//[ComplexTypeDeclaration]
		public CrossReference getSuperTypeComplexTypeDeclarationCrossReference_1_1_0() { return cSuperTypeComplexTypeDeclarationCrossReference_1_1_0; }

		//ID
		public RuleCall getSuperTypeComplexTypeDeclarationIDTerminalRuleCall_1_1_0_1() { return cSuperTypeComplexTypeDeclarationIDTerminalRuleCall_1_1_0_1; }

		//type=BlockType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//BlockType
		public RuleCall getTypeBlockTypeParserRuleCall_2_0() { return cTypeBlockTypeParserRuleCall_2_0; }
	}

	public class BlockTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexTypeLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BlockType:
		//
		//	Type | ComplexTypeLiteral;
		public ParserRule getRule() { return rule; }

		//Type | ComplexTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//ComplexTypeLiteral
		public RuleCall getComplexTypeLiteralParserRuleCall_1() { return cComplexTypeLiteralParserRuleCall_1; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWrapWithMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//
		//	TypedMember / *('=' defaultValue=Value)?  * / | WrapWithMember;
		public ParserRule getRule() { return rule; }

		//TypedMember / *('=' defaultValue=Value)?  * / | WrapWithMember
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypedMember
		public RuleCall getTypedMemberParserRuleCall_0() { return cTypedMemberParserRuleCall_0; }

		//WrapWithMember
		public RuleCall getWrapWithMemberParserRuleCall_1() { return cWrapWithMemberParserRuleCall_1; }
	}

	public class TypedMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDNamedMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringNamedMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypedMember:
		//
		//	IDNamedMember | StringNamedMember;
		public ParserRule getRule() { return rule; }

		//IDNamedMember | StringNamedMember
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDNamedMember
		public RuleCall getIDNamedMemberParserRuleCall_0() { return cIDNamedMemberParserRuleCall_0; }

		//StringNamedMember
		public RuleCall getStringNamedMemberParserRuleCall_1() { return cStringNamedMemberParserRuleCall_1; }
	}

	public class IDNamedMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDNamedMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//IDNamedMember:
		//
		//	name=ID ":" type=Type;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=Type
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class StringNamedMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringNamedMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//StringNamedMember:
		//
		//	name=STRING ":" type=Type;
		public ParserRule getRule() { return rule; }

		//name=STRING ":" type=Type
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class WrapWithMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WrapWithMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWrapWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiteralComplexTypeLiteralParserRuleCall_2_0 = (RuleCall)cLiteralAssignment_2.eContents().get(0);
		
		//WrapWithMember:
		//
		//	"wrap-with" name=STRING literal=ComplexTypeLiteral;
		public ParserRule getRule() { return rule; }

		//"wrap-with" name=STRING literal=ComplexTypeLiteral
		public Group getGroup() { return cGroup; }

		//"wrap-with"
		public Keyword getWrapWithKeyword_0() { return cWrapWithKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//literal=ComplexTypeLiteral
		public Assignment getLiteralAssignment_2() { return cLiteralAssignment_2; }

		//ComplexTypeLiteral
		public RuleCall getLiteralComplexTypeLiteralParserRuleCall_2_0() { return cLiteralComplexTypeLiteralParserRuleCall_2_0; }
	}

	public class SimpleMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDNamedSimpleMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringNamedSimpleMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SimpleMember:
		//
		//	IDNamedSimpleMember | StringNamedSimpleMember;
		public ParserRule getRule() { return rule; }

		//IDNamedSimpleMember | StringNamedSimpleMember
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDNamedSimpleMember
		public RuleCall getIDNamedSimpleMemberParserRuleCall_0() { return cIDNamedSimpleMemberParserRuleCall_0; }

		//StringNamedSimpleMember
		public RuleCall getStringNamedSimpleMemberParserRuleCall_1() { return cStringNamedSimpleMemberParserRuleCall_1; }
	}

	public class IDNamedSimpleMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDNamedSimpleMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIntrinsicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//IDNamedSimpleMember:
		//
		//	name=ID ":" type=IntrinsicType;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=IntrinsicType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=IntrinsicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//IntrinsicType
		public RuleCall getTypeIntrinsicTypeParserRuleCall_2_0() { return cTypeIntrinsicTypeParserRuleCall_2_0; }
	}

	public class StringNamedSimpleMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringNamedSimpleMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIntrinsicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//StringNamedSimpleMember:
		//
		//	name=STRING ":" type=IntrinsicType;
		public ParserRule getRule() { return rule; }

		//name=STRING ":" type=IntrinsicType
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=IntrinsicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//IntrinsicType
		public RuleCall getTypeIntrinsicTypeParserRuleCall_2_0() { return cTypeIntrinsicTypeParserRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntrinsicTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGenericListTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArrayTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//
		//	UserType | IntrinsicType | GenericListType | ArrayType;
		public ParserRule getRule() { return rule; }

		//UserType | IntrinsicType | GenericListType | ArrayType
		public Alternatives getAlternatives() { return cAlternatives; }

		//UserType
		public RuleCall getUserTypeParserRuleCall_0() { return cUserTypeParserRuleCall_0; }

		//IntrinsicType
		public RuleCall getIntrinsicTypeParserRuleCall_1() { return cIntrinsicTypeParserRuleCall_1; }

		//GenericListType
		public RuleCall getGenericListTypeParserRuleCall_2() { return cGenericListTypeParserRuleCall_2; }

		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_3() { return cArrayTypeParserRuleCall_3; }
	}

	public class GenericListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdListKeyword_0_0 = (Keyword)cIdAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGenericTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cGenericTypeAlternatives_2_0 = (Alternatives)cGenericTypeAssignment_2.eContents().get(0);
		private final RuleCall cGenericTypeUserTypeParserRuleCall_2_0_0 = (RuleCall)cGenericTypeAlternatives_2_0.eContents().get(0);
		private final RuleCall cGenericTypeIntrinsicTypeParserRuleCall_2_0_1 = (RuleCall)cGenericTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GenericListType:
		//
		//	id="List" "<" genericType=(UserType | IntrinsicType) ">";
		public ParserRule getRule() { return rule; }

		//id="List" "<" genericType=(UserType | IntrinsicType) ">"
		public Group getGroup() { return cGroup; }

		//id="List"
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//"List"
		public Keyword getIdListKeyword_0_0() { return cIdListKeyword_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//genericType=(UserType | IntrinsicType)
		public Assignment getGenericTypeAssignment_2() { return cGenericTypeAssignment_2; }

		//UserType | IntrinsicType
		public Alternatives getGenericTypeAlternatives_2_0() { return cGenericTypeAlternatives_2_0; }

		//UserType
		public RuleCall getGenericTypeUserTypeParserRuleCall_2_0_0() { return cGenericTypeUserTypeParserRuleCall_2_0_0; }

		//IntrinsicType
		public RuleCall getGenericTypeIntrinsicTypeParserRuleCall_2_0_1() { return cGenericTypeIntrinsicTypeParserRuleCall_2_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cElementTypeAlternatives_0_0 = (Alternatives)cElementTypeAssignment_0.eContents().get(0);
		private final RuleCall cElementTypeUserTypeParserRuleCall_0_0_0 = (RuleCall)cElementTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cElementTypeIntrinsicTypeParserRuleCall_0_0_1 = (RuleCall)cElementTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIdLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cIdAssignment_1.eContents().get(0);
		
		//ArrayType:
		//
		//	elementType=(UserType | IntrinsicType) id="[]";
		public ParserRule getRule() { return rule; }

		//elementType=(UserType | IntrinsicType) id="[]"
		public Group getGroup() { return cGroup; }

		//elementType=(UserType | IntrinsicType)
		public Assignment getElementTypeAssignment_0() { return cElementTypeAssignment_0; }

		//UserType | IntrinsicType
		public Alternatives getElementTypeAlternatives_0_0() { return cElementTypeAlternatives_0_0; }

		//UserType
		public RuleCall getElementTypeUserTypeParserRuleCall_0_0_0() { return cElementTypeUserTypeParserRuleCall_0_0_0; }

		//IntrinsicType
		public RuleCall getElementTypeIntrinsicTypeParserRuleCall_0_0_1() { return cElementTypeIntrinsicTypeParserRuleCall_0_0_1; }

		//id="[]"
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//"[]"
		public Keyword getIdLeftSquareBracketRightSquareBracketKeyword_1_0() { return cIdLeftSquareBracketRightSquareBracketKeyword_1_0; }
	}

	public class UserTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserType");
		private final Assignment cDeclarationAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cDeclarationUserTypeDeclarationCrossReference_0 = (CrossReference)cDeclarationAssignment.eContents().get(0);
		private final RuleCall cDeclarationUserTypeDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cDeclarationUserTypeDeclarationCrossReference_0.eContents().get(1);
		
		//UserType:
		//
		//	declaration=[UserTypeDeclaration];
		public ParserRule getRule() { return rule; }

		//declaration=[UserTypeDeclaration]
		public Assignment getDeclarationAssignment() { return cDeclarationAssignment; }

		//[UserTypeDeclaration]
		public CrossReference getDeclarationUserTypeDeclarationCrossReference_0() { return cDeclarationUserTypeDeclarationCrossReference_0; }

		//ID
		public RuleCall getDeclarationUserTypeDeclarationIDTerminalRuleCall_0_1() { return cDeclarationUserTypeDeclarationIDTerminalRuleCall_0_1; }
	}

	public class UserTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserTypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComplexTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UserTypeDeclaration:
		//
		//	ComplexTypeDeclaration | EnumTypeDeclaration;
		public ParserRule getRule() { return rule; }

		//ComplexTypeDeclaration | EnumTypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComplexTypeDeclaration
		public RuleCall getComplexTypeDeclarationParserRuleCall_0() { return cComplexTypeDeclarationParserRuleCall_0; }

		//EnumTypeDeclaration
		public RuleCall getEnumTypeDeclarationParserRuleCall_1() { return cEnumTypeDeclarationParserRuleCall_1; }
	}

	public class ComplexTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeywordTypeKeyword_0_0 = (Keyword)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cGenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cGenGenerateKeyword_1_0 = (Keyword)cGenAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralComplexTypeLiteralParserRuleCall_3_0 = (RuleCall)cLiteralAssignment_3.eContents().get(0);
		
		//ComplexTypeDeclaration:
		//
		//	keyword="type" gen?="generate"? name=ID literal=ComplexTypeLiteral?;
		public ParserRule getRule() { return rule; }

		//keyword="type" gen?="generate"? name=ID literal=ComplexTypeLiteral?
		public Group getGroup() { return cGroup; }

		//keyword="type"
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }

		//"type"
		public Keyword getKeywordTypeKeyword_0_0() { return cKeywordTypeKeyword_0_0; }

		//gen?="generate"?
		public Assignment getGenAssignment_1() { return cGenAssignment_1; }

		//"generate"
		public Keyword getGenGenerateKeyword_1_0() { return cGenGenerateKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//literal=ComplexTypeLiteral?
		public Assignment getLiteralAssignment_3() { return cLiteralAssignment_3; }

		//ComplexTypeLiteral
		public RuleCall getLiteralComplexTypeLiteralParserRuleCall_3_0() { return cLiteralComplexTypeLiteralParserRuleCall_3_0; }
	}

	public class EnumTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeywordEnumKeyword_0_0 = (Keyword)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cGenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cGenGenerateKeyword_1_0 = (Keyword)cGenAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypeIntegerTypeParserRuleCall_3_1_0 = (RuleCall)cSuperTypeAssignment_3_1.eContents().get(0);
		private final Assignment cLiteralAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLiteralEnumTypeLiteralParserRuleCall_4_0 = (RuleCall)cLiteralAssignment_4.eContents().get(0);
		
		//EnumTypeDeclaration:
		//
		//	keyword="enum" gen?="generate"? name=ID ("extends" superType=IntegerType)? literal=EnumTypeLiteral?;
		public ParserRule getRule() { return rule; }

		//keyword="enum" gen?="generate"? name=ID ("extends" superType=IntegerType)? literal=EnumTypeLiteral?
		public Group getGroup() { return cGroup; }

		//keyword="enum"
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }

		//"enum"
		public Keyword getKeywordEnumKeyword_0_0() { return cKeywordEnumKeyword_0_0; }

		//gen?="generate"?
		public Assignment getGenAssignment_1() { return cGenAssignment_1; }

		//"generate"
		public Keyword getGenGenerateKeyword_1_0() { return cGenGenerateKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superType=IntegerType)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superType=IntegerType
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }

		//IntegerType
		public RuleCall getSuperTypeIntegerTypeParserRuleCall_3_1_0() { return cSuperTypeIntegerTypeParserRuleCall_3_1_0; }

		//literal=EnumTypeLiteral?
		public Assignment getLiteralAssignment_4() { return cLiteralAssignment_4; }

		//EnumTypeLiteral
		public RuleCall getLiteralEnumTypeLiteralParserRuleCall_4_0() { return cLiteralEnumTypeLiteralParserRuleCall_4_0; }
	}

	public class EnumTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersEnumMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersEnumMemberParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumTypeLiteral:
		//
		//	"{" members+=EnumMember ("," members+=EnumMember)* "}";
		public ParserRule getRule() { return rule; }

		//"{" members+=EnumMember ("," members+=EnumMember)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//members+=EnumMember
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//EnumMember
		public RuleCall getMembersEnumMemberParserRuleCall_1_0() { return cMembersEnumMemberParserRuleCall_1_0; }

		//("," members+=EnumMember)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//members+=EnumMember
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//EnumMember
		public RuleCall getMembersEnumMemberParserRuleCall_2_1_0() { return cMembersEnumMemberParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EnumMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cAssignmentEqualsSignKeyword_1_0_0 = (Keyword)cAssignmentAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//EnumMember:
		//
		//	name=ID (assignment?="=" value=INT)?;
		public ParserRule getRule() { return rule; }

		//name=ID (assignment?="=" value=INT)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(assignment?="=" value=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//assignment?="="
		public Assignment getAssignmentAssignment_1_0() { return cAssignmentAssignment_1_0; }

		//"="
		public Keyword getAssignmentEqualsSignKeyword_1_0_0() { return cAssignmentEqualsSignKeyword_1_0_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
	}

	public class ComplexTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersMemberParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComplexTypeLiteral:
		//
		//	"{" members+=Member ("," members+=Member)* "}";
		public ParserRule getRule() { return rule; }

		//"{" members+=Member ("," members+=Member)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//members+=Member
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_1_0() { return cMembersMemberParserRuleCall_1_0; }

		//("," members+=Member)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//members+=Member
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_1_0() { return cMembersMemberParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class IntrinsicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntrinsicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDateTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumericTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//IntrinsicType:
		//
		//	StringType | BooleanType | DateType | NumericType;
		public ParserRule getRule() { return rule; }

		//StringType | BooleanType | DateType | NumericType
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_0() { return cStringTypeParserRuleCall_0; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }

		//DateType
		public RuleCall getDateTypeParserRuleCall_2() { return cDateTypeParserRuleCall_2; }

		//NumericType
		public RuleCall getNumericTypeParserRuleCall_3() { return cNumericTypeParserRuleCall_3; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdStringKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//StringType:
		//
		//	id="String";
		public ParserRule getRule() { return rule; }

		//id="String"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"String"
		public Keyword getIdStringKeyword_0() { return cIdStringKeyword_0; }
	}

	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdBooleanKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//BooleanType:
		//
		//	id="boolean";
		public ParserRule getRule() { return rule; }

		//id="boolean"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"boolean"
		public Keyword getIdBooleanKeyword_0() { return cIdBooleanKeyword_0; }
	}

	public class DateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdDateKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//DateType:
		//
		//	id="Date";
		public ParserRule getRule() { return rule; }

		//id="Date"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"Date"
		public Keyword getIdDateKeyword_0() { return cIdDateKeyword_0; }
	}

	public class NumericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLongTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NumericType:
		//
		//	IntegerType | LongType | FloatType | DoubleType;
		public ParserRule getRule() { return rule; }

		//IntegerType | LongType | FloatType | DoubleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }

		//LongType
		public RuleCall getLongTypeParserRuleCall_1() { return cLongTypeParserRuleCall_1; }

		//FloatType
		public RuleCall getFloatTypeParserRuleCall_2() { return cFloatTypeParserRuleCall_2; }

		//DoubleType
		public RuleCall getDoubleTypeParserRuleCall_3() { return cDoubleTypeParserRuleCall_3; }
	}

	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdIntKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//IntegerType:
		//
		//	id="int";
		public ParserRule getRule() { return rule; }

		//id="int"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"int"
		public Keyword getIdIntKeyword_0() { return cIdIntKeyword_0; }
	}

	public class LongTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdLongKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//LongType:
		//
		//	id="long";
		public ParserRule getRule() { return rule; }

		//id="long"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"long"
		public Keyword getIdLongKeyword_0() { return cIdLongKeyword_0; }
	}

	public class FloatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdFloatKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//FloatType:
		//
		//	id="float";
		public ParserRule getRule() { return rule; }

		//id="float"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"float"
		public Keyword getIdFloatKeyword_0() { return cIdFloatKeyword_0; }
	}

	public class DoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleType");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdDoubleKeyword_0 = (Keyword)cIdAssignment.eContents().get(0);
		
		//DoubleType:
		//
		//	id="double";
		public ParserRule getRule() { return rule; }

		//id="double"
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"double"
		public Keyword getIdDoubleKeyword_0() { return cIdDoubleKeyword_0; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private ModelElements pModel;
	private DeclarationElements pDeclaration;
	private ClientElements pClient;
	private HttpMethodElements pHttpMethod;
	private HttpPostElements pHttpPost;
	private HttpPutElements pHttpPut;
	private HttpGetElements pHttpGet;
	private HttpDeleteElements pHttpDelete;
	private ParamsBlockElements pParamsBlock;
	private BodyBlockElements pBodyBlock;
	private ResponseBlockElements pResponseBlock;
	private BlockTypeElements pBlockType;
	private MemberElements pMember;
	private TypedMemberElements pTypedMember;
	private IDNamedMemberElements pIDNamedMember;
	private StringNamedMemberElements pStringNamedMember;
	private WrapWithMemberElements pWrapWithMember;
	private SimpleMemberElements pSimpleMember;
	private IDNamedSimpleMemberElements pIDNamedSimpleMember;
	private StringNamedSimpleMemberElements pStringNamedSimpleMember;
	private TypeElements pType;
	private GenericListTypeElements pGenericListType;
	private ArrayTypeElements pArrayType;
	private UserTypeElements pUserType;
	private UserTypeDeclarationElements pUserTypeDeclaration;
	private ComplexTypeDeclarationElements pComplexTypeDeclaration;
	private EnumTypeDeclarationElements pEnumTypeDeclaration;
	private EnumTypeLiteralElements pEnumTypeLiteral;
	private EnumMemberElements pEnumMember;
	private ComplexTypeLiteralElements pComplexTypeLiteral;
	private IntrinsicTypeElements pIntrinsicType;
	private StringTypeElements pStringType;
	private BooleanTypeElements pBooleanType;
	private DateTypeElements pDateType;
	private NumericTypeElements pNumericType;
	private IntegerTypeElements pIntegerType;
	private LongTypeElements pLongType;
	private FloatTypeElements pFloatType;
	private DoubleTypeElements pDoubleType;
	private FQNElements pFQN;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public NetModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.robotoworks.mechanoid.net.NetModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	"package" packageName=FQN declarations+=Declaration*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Declaration:
	//
	//	UserTypeDeclaration | Client;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Client:
	//
	//	"client" name=ID baseUrl=STRING "{" methods+=HttpMethod* "}";
	public ClientElements getClientAccess() {
		return (pClient != null) ? pClient : (pClient = new ClientElements());
	}
	
	public ParserRule getClientRule() {
		return getClientAccess().getRule();
	}

	//HttpMethod:
	//
	//	HttpPost | HttpGet | HttpPut | HttpDelete;
	public HttpMethodElements getHttpMethodAccess() {
		return (pHttpMethod != null) ? pHttpMethod : (pHttpMethod = new HttpMethodElements());
	}
	
	public ParserRule getHttpMethodRule() {
		return getHttpMethodAccess().getRule();
	}

	//HttpPost:
	//
	//	"post" name=ID path=STRING? "{" params=ParamsBlock? body=BodyBlock? response=ResponseBlock? "}";
	public HttpPostElements getHttpPostAccess() {
		return (pHttpPost != null) ? pHttpPost : (pHttpPost = new HttpPostElements());
	}
	
	public ParserRule getHttpPostRule() {
		return getHttpPostAccess().getRule();
	}

	//HttpPut:
	//
	//	"put" name=ID path=STRING? "{" params=ParamsBlock? body=BodyBlock? response=ResponseBlock? "}";
	public HttpPutElements getHttpPutAccess() {
		return (pHttpPut != null) ? pHttpPut : (pHttpPut = new HttpPutElements());
	}
	
	public ParserRule getHttpPutRule() {
		return getHttpPutAccess().getRule();
	}

	//HttpGet:
	//
	//	"get" name=ID path=STRING? "{" params=ParamsBlock? response=ResponseBlock? "}";
	public HttpGetElements getHttpGetAccess() {
		return (pHttpGet != null) ? pHttpGet : (pHttpGet = new HttpGetElements());
	}
	
	public ParserRule getHttpGetRule() {
		return getHttpGetAccess().getRule();
	}

	//HttpDelete:
	//
	//	"delete" name=ID path=STRING? "{" params=ParamsBlock? response=ResponseBlock? "}";
	public HttpDeleteElements getHttpDeleteAccess() {
		return (pHttpDelete != null) ? pHttpDelete : (pHttpDelete = new HttpDeleteElements());
	}
	
	public ParserRule getHttpDeleteRule() {
		return getHttpDeleteAccess().getRule();
	}

	//ParamsBlock:
	//
	//	"params" params+=SimpleMember ("&" params+=SimpleMember)*;
	public ParamsBlockElements getParamsBlockAccess() {
		return (pParamsBlock != null) ? pParamsBlock : (pParamsBlock = new ParamsBlockElements());
	}
	
	public ParserRule getParamsBlockRule() {
		return getParamsBlockAccess().getRule();
	}

	//BodyBlock:
	//
	//	name="body" type=BlockType;
	public BodyBlockElements getBodyBlockAccess() {
		return (pBodyBlock != null) ? pBodyBlock : (pBodyBlock = new BodyBlockElements());
	}
	
	public ParserRule getBodyBlockRule() {
		return getBodyBlockAccess().getRule();
	}

	//ResponseBlock:
	//
	//	name="response" ("extends" superType=[ComplexTypeDeclaration])? type=BlockType?;
	public ResponseBlockElements getResponseBlockAccess() {
		return (pResponseBlock != null) ? pResponseBlock : (pResponseBlock = new ResponseBlockElements());
	}
	
	public ParserRule getResponseBlockRule() {
		return getResponseBlockAccess().getRule();
	}

	//BlockType:
	//
	//	Type | ComplexTypeLiteral;
	public BlockTypeElements getBlockTypeAccess() {
		return (pBlockType != null) ? pBlockType : (pBlockType = new BlockTypeElements());
	}
	
	public ParserRule getBlockTypeRule() {
		return getBlockTypeAccess().getRule();
	}

	//Member:
	//
	//	TypedMember / *('=' defaultValue=Value)?  * / | WrapWithMember;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//TypedMember:
	//
	//	IDNamedMember | StringNamedMember;
	public TypedMemberElements getTypedMemberAccess() {
		return (pTypedMember != null) ? pTypedMember : (pTypedMember = new TypedMemberElements());
	}
	
	public ParserRule getTypedMemberRule() {
		return getTypedMemberAccess().getRule();
	}

	//IDNamedMember:
	//
	//	name=ID ":" type=Type;
	public IDNamedMemberElements getIDNamedMemberAccess() {
		return (pIDNamedMember != null) ? pIDNamedMember : (pIDNamedMember = new IDNamedMemberElements());
	}
	
	public ParserRule getIDNamedMemberRule() {
		return getIDNamedMemberAccess().getRule();
	}

	//StringNamedMember:
	//
	//	name=STRING ":" type=Type;
	public StringNamedMemberElements getStringNamedMemberAccess() {
		return (pStringNamedMember != null) ? pStringNamedMember : (pStringNamedMember = new StringNamedMemberElements());
	}
	
	public ParserRule getStringNamedMemberRule() {
		return getStringNamedMemberAccess().getRule();
	}

	//WrapWithMember:
	//
	//	"wrap-with" name=STRING literal=ComplexTypeLiteral;
	public WrapWithMemberElements getWrapWithMemberAccess() {
		return (pWrapWithMember != null) ? pWrapWithMember : (pWrapWithMember = new WrapWithMemberElements());
	}
	
	public ParserRule getWrapWithMemberRule() {
		return getWrapWithMemberAccess().getRule();
	}

	//SimpleMember:
	//
	//	IDNamedSimpleMember | StringNamedSimpleMember;
	public SimpleMemberElements getSimpleMemberAccess() {
		return (pSimpleMember != null) ? pSimpleMember : (pSimpleMember = new SimpleMemberElements());
	}
	
	public ParserRule getSimpleMemberRule() {
		return getSimpleMemberAccess().getRule();
	}

	//IDNamedSimpleMember:
	//
	//	name=ID ":" type=IntrinsicType;
	public IDNamedSimpleMemberElements getIDNamedSimpleMemberAccess() {
		return (pIDNamedSimpleMember != null) ? pIDNamedSimpleMember : (pIDNamedSimpleMember = new IDNamedSimpleMemberElements());
	}
	
	public ParserRule getIDNamedSimpleMemberRule() {
		return getIDNamedSimpleMemberAccess().getRule();
	}

	//StringNamedSimpleMember:
	//
	//	name=STRING ":" type=IntrinsicType;
	public StringNamedSimpleMemberElements getStringNamedSimpleMemberAccess() {
		return (pStringNamedSimpleMember != null) ? pStringNamedSimpleMember : (pStringNamedSimpleMember = new StringNamedSimpleMemberElements());
	}
	
	public ParserRule getStringNamedSimpleMemberRule() {
		return getStringNamedSimpleMemberAccess().getRule();
	}

	//Type:
	//
	//	UserType | IntrinsicType | GenericListType | ArrayType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//GenericListType:
	//
	//	id="List" "<" genericType=(UserType | IntrinsicType) ">";
	public GenericListTypeElements getGenericListTypeAccess() {
		return (pGenericListType != null) ? pGenericListType : (pGenericListType = new GenericListTypeElements());
	}
	
	public ParserRule getGenericListTypeRule() {
		return getGenericListTypeAccess().getRule();
	}

	//ArrayType:
	//
	//	elementType=(UserType | IntrinsicType) id="[]";
	public ArrayTypeElements getArrayTypeAccess() {
		return (pArrayType != null) ? pArrayType : (pArrayType = new ArrayTypeElements());
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//UserType:
	//
	//	declaration=[UserTypeDeclaration];
	public UserTypeElements getUserTypeAccess() {
		return (pUserType != null) ? pUserType : (pUserType = new UserTypeElements());
	}
	
	public ParserRule getUserTypeRule() {
		return getUserTypeAccess().getRule();
	}

	//UserTypeDeclaration:
	//
	//	ComplexTypeDeclaration | EnumTypeDeclaration;
	public UserTypeDeclarationElements getUserTypeDeclarationAccess() {
		return (pUserTypeDeclaration != null) ? pUserTypeDeclaration : (pUserTypeDeclaration = new UserTypeDeclarationElements());
	}
	
	public ParserRule getUserTypeDeclarationRule() {
		return getUserTypeDeclarationAccess().getRule();
	}

	//ComplexTypeDeclaration:
	//
	//	keyword="type" gen?="generate"? name=ID literal=ComplexTypeLiteral?;
	public ComplexTypeDeclarationElements getComplexTypeDeclarationAccess() {
		return (pComplexTypeDeclaration != null) ? pComplexTypeDeclaration : (pComplexTypeDeclaration = new ComplexTypeDeclarationElements());
	}
	
	public ParserRule getComplexTypeDeclarationRule() {
		return getComplexTypeDeclarationAccess().getRule();
	}

	//EnumTypeDeclaration:
	//
	//	keyword="enum" gen?="generate"? name=ID ("extends" superType=IntegerType)? literal=EnumTypeLiteral?;
	public EnumTypeDeclarationElements getEnumTypeDeclarationAccess() {
		return (pEnumTypeDeclaration != null) ? pEnumTypeDeclaration : (pEnumTypeDeclaration = new EnumTypeDeclarationElements());
	}
	
	public ParserRule getEnumTypeDeclarationRule() {
		return getEnumTypeDeclarationAccess().getRule();
	}

	//EnumTypeLiteral:
	//
	//	"{" members+=EnumMember ("," members+=EnumMember)* "}";
	public EnumTypeLiteralElements getEnumTypeLiteralAccess() {
		return (pEnumTypeLiteral != null) ? pEnumTypeLiteral : (pEnumTypeLiteral = new EnumTypeLiteralElements());
	}
	
	public ParserRule getEnumTypeLiteralRule() {
		return getEnumTypeLiteralAccess().getRule();
	}

	//EnumMember:
	//
	//	name=ID (assignment?="=" value=INT)?;
	public EnumMemberElements getEnumMemberAccess() {
		return (pEnumMember != null) ? pEnumMember : (pEnumMember = new EnumMemberElements());
	}
	
	public ParserRule getEnumMemberRule() {
		return getEnumMemberAccess().getRule();
	}

	//ComplexTypeLiteral:
	//
	//	"{" members+=Member ("," members+=Member)* "}";
	public ComplexTypeLiteralElements getComplexTypeLiteralAccess() {
		return (pComplexTypeLiteral != null) ? pComplexTypeLiteral : (pComplexTypeLiteral = new ComplexTypeLiteralElements());
	}
	
	public ParserRule getComplexTypeLiteralRule() {
		return getComplexTypeLiteralAccess().getRule();
	}

	//IntrinsicType:
	//
	//	StringType | BooleanType | DateType | NumericType;
	public IntrinsicTypeElements getIntrinsicTypeAccess() {
		return (pIntrinsicType != null) ? pIntrinsicType : (pIntrinsicType = new IntrinsicTypeElements());
	}
	
	public ParserRule getIntrinsicTypeRule() {
		return getIntrinsicTypeAccess().getRule();
	}

	//StringType:
	//
	//	id="String";
	public StringTypeElements getStringTypeAccess() {
		return (pStringType != null) ? pStringType : (pStringType = new StringTypeElements());
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//BooleanType:
	//
	//	id="boolean";
	public BooleanTypeElements getBooleanTypeAccess() {
		return (pBooleanType != null) ? pBooleanType : (pBooleanType = new BooleanTypeElements());
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//DateType:
	//
	//	id="Date";
	public DateTypeElements getDateTypeAccess() {
		return (pDateType != null) ? pDateType : (pDateType = new DateTypeElements());
	}
	
	public ParserRule getDateTypeRule() {
		return getDateTypeAccess().getRule();
	}

	//NumericType:
	//
	//	IntegerType | LongType | FloatType | DoubleType;
	public NumericTypeElements getNumericTypeAccess() {
		return (pNumericType != null) ? pNumericType : (pNumericType = new NumericTypeElements());
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}

	//IntegerType:
	//
	//	id="int";
	public IntegerTypeElements getIntegerTypeAccess() {
		return (pIntegerType != null) ? pIntegerType : (pIntegerType = new IntegerTypeElements());
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//LongType:
	//
	//	id="long";
	public LongTypeElements getLongTypeAccess() {
		return (pLongType != null) ? pLongType : (pLongType = new LongTypeElements());
	}
	
	public ParserRule getLongTypeRule() {
		return getLongTypeAccess().getRule();
	}

	//FloatType:
	//
	//	id="float";
	public FloatTypeElements getFloatTypeAccess() {
		return (pFloatType != null) ? pFloatType : (pFloatType = new FloatTypeElements());
	}
	
	public ParserRule getFloatTypeRule() {
		return getFloatTypeAccess().getRule();
	}

	//DoubleType:
	//
	//	id="double";
	public DoubleTypeElements getDoubleTypeAccess() {
		return (pDoubleType != null) ? pDoubleType : (pDoubleType = new DoubleTypeElements());
	}
	
	public ParserRule getDoubleTypeRule() {
		return getDoubleTypeAccess().getRule();
	}

	//FQN:
	//
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
