/*
 * generated by Xtext
 */
package com.robotoworks.mechanoid.sqlite.generator

import com.google.inject.Inject
import com.robotoworks.mechanoid.sqlite.sqliteModel.MigrationBlock
import com.robotoworks.mechanoid.sqlite.sqliteModel.Model
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

import static extension com.robotoworks.mechanoid.sqlite.generator.Extensions.*
import com.robotoworks.mechanoid.sqlite.generator.SqliteMigrationGenerator

import static extension com.robotoworks.mechanoid.common.util.Strings.*
import com.robotoworks.mechanoid.common.xtext.generator.MechanoidOutputConfigurationProvider

class SqliteModelGenerator implements IGenerator {
	@Inject SqliteOpenHelperGenerator mOpenHelperGenerator
	@Inject ContentProviderContractGenerator mContentProviderContractGenerator
	@Inject SqliteDatabaseSnapshotBuilder mDbSnapshotBuilder
	@Inject ContentProviderGenerator mContentProviderGenerator
	@Inject SqliteMigrationGenerator mMigrationGenerator
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		var model = resource.contents.head as Model;
		
		var snapshot = mDbSnapshotBuilder.build(model).database.migrations.get(0)
		
		fsa.generateFile(
			model.packageName.resolveFileName("Abstract".concat(model.database.name).concat("OpenHelper")), 
			mOpenHelperGenerator.generate(model, snapshot)
		);
		fsa.generateFile(
			model.packageName.resolveFileName(model.database.name.concat("OpenHelper")), 
			MechanoidOutputConfigurationProvider::DEFAULT_STUB_OUTPUT, 
			mOpenHelperGenerator.generateStub(model, snapshot)
		);
		fsa.generateFile(
			model.packageName.resolveFileName(model.database.name.concat("Contract")), 
			mContentProviderContractGenerator.generate(model, snapshot)
		);
		fsa.generateFile(
			model.packageName.resolveFileName("Abstract".concat(model.database.name).concat("ContentProvider")), 
			mContentProviderGenerator.generate(model, snapshot)
		);
		
		fsa.generateFile(
			model.packageName.resolveFileName(model.database.name.concat("ContentProvider")), 
			MechanoidOutputConfigurationProvider::DEFAULT_STUB_OUTPUT, 
			mContentProviderGenerator.generateStub(model, snapshot)
		);
		
		model.database.migrations.forEach[
			item,index|
			if(index> 0) generateMigration(resource, fsa, item, index + 1)
		];		
	}
	
	def void generateMigration(Resource resource, IFileSystemAccess fsa, MigrationBlock migration, int version) { 
		
		var model = resource.contents.head as Model;
		
		var genFileName = model.packageName.resolveFileName("Abstract".concat(model.database.name).concat("MigrationV").concat(String::valueOf(version)))
		var genStubFileName = model.packageName.resolveFileName(model.database.name.concat("MigrationV").concat(String::valueOf(version)))
			
		fsa.generateFile(genFileName, 
			mMigrationGenerator.generate(model, migration, version)
		)
		
		fsa.generateFile(genStubFileName, 
			MechanoidOutputConfigurationProvider::DEFAULT_STUB_OUTPUT, 
			mMigrationGenerator.generateStub(model, migration, version)
		)
	}

}
