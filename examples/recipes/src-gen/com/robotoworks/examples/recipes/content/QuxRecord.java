/*
 * Generated by Robotoworks Mechanoid
 */
package com.robotoworks.examples.recipes.content;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Parcel;
import android.os.Parcelable;

import com.robotoworks.examples.recipes.content.RecipesDBContract.Qux;
import com.robotoworks.examples.recipes.content.RecipesDBContract.Qux.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.sqlite.ActiveRecord;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.content.AbstractValuesBuilder;

public class QuxRecord extends ActiveRecord implements Parcelable {
    public static final Parcelable.Creator<QuxRecord> CREATOR 
    	= new Parcelable.Creator<QuxRecord>() {
        public QuxRecord createFromParcel(Parcel in) {
            return new QuxRecord(in);
        }

        public QuxRecord[] newArray(int size) {
            return new QuxRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Qux._ID
    };
    
    public interface Indices {
    	int _ID = 0;
    }
    
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    
    public QuxRecord() {
    	super(Qux.CONTENT_URI);
	}
	
	private QuxRecord(Parcel in) {
    	super(Qux.CONTENT_URI);
    	
		setId(in.readLong());
		
		boolean[] dirtyFlags = new boolean[1];
		in.readBooleanArray(dirtyFlags);
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
	    dest.writeBooleanArray(new boolean[] {
	    });
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Qux.newBuilder();

		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
	}
	
	public static QuxRecord fromCursor(Cursor c) {
	    QuxRecord item = new QuxRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static QuxRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Qux.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
