package com.robotoworks.mechanoid.sqlite.generator

import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateTableStatement
import com.robotoworks.mechanoid.sqlite.sqliteModel.CreateViewStatement
import com.robotoworks.mechanoid.sqlite.sqliteModel.MigrationBlock
import com.robotoworks.mechanoid.sqlite.sqliteModel.Model

import static extension com.robotoworks.mechanoid.sqlite.generator.Extensions.*
import static extension com.robotoworks.mechanoid.common.util.Strings.*

class ContentProviderGenerator {
		def CharSequence generate(Model model, MigrationBlock snapshot) '''
			/*
			 * Generated by Robotoworks Mechanoid
			 */
			package «model.packageName»;
			
			import java.util.ArrayList;
			
			import android.content.ContentProviderOperation;
			import android.content.ContentProviderResult;
			import android.content.ContentValues;
			import android.content.Context;
			import android.content.OperationApplicationException;
			import android.content.UriMatcher;
			import android.database.Cursor;
			import android.database.sqlite.SQLiteDatabase;
			import android.net.Uri;
			import com.robotoworks.mechanoid.sqlite.SelectionQueryBuilder;
			import com.robotoworks.mechanoid.sqlite.MechanoidContentProvider;
			import static com.robotoworks.mechanoid.sqlite.SelectionQueryBuilder.Op.*;
			«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
			import «model.packageName».«model.database.name.pascalize»Contract.«tbl.name.pascalize»;
			«ENDFOR»
			«FOR vw : snapshot.statements.filter(typeof(CreateViewStatement))»
			import «model.packageName».«model.database.name.pascalize»Contract.«vw.name.pascalize»;
			
			«ENDFOR»
			import «model.packageName».Abstract«model.database.name.pascalize»OpenHelper.Tables;
			
			public abstract class Abstract«model.database.name.pascalize»ContentProvider extends MechanoidContentProvider {
			
			    private static final UriMatcher sUriMatcher = buildUriMatcher();
			
			    private Abstract«model.database.name.pascalize»OpenHelper mOpenHelper;

				«var counter=0»
				«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
				private static final int «tbl.name.underscore.toUpperCase» = «counter=counter+1»;
				«IF tbl.hasAndroidPrimaryKey»
				private static final int «tbl.name.underscore.toUpperCase»_ID = «counter=counter+1»;
				«ENDIF»
				«ENDFOR»

				«FOR vw : snapshot.statements.filter(typeof(CreateViewStatement))»
				private static final int «vw.name.underscore.toUpperCase» = «counter=counter+1»;
				«IF vw.hasAndroidPrimaryKey»
				private static final int «vw.name.underscore.toUpperCase»_ID = «counter=counter+1»;
				«ENDIF»				
				«ENDFOR»
				
				public static final int URI_MATCHER_MAX = «counter»;
			
			    private static UriMatcher buildUriMatcher() {
			        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);
			        final String authority = «model.database.name.pascalize»Contract.CONTENT_AUTHORITY;
			
					// Tables
					«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
					matcher.addURI(authority, "«tbl.name»", «tbl.name.underscore.toUpperCase»);
					«IF tbl.hasAndroidPrimaryKey»
					matcher.addURI(authority, "«tbl.name»/*", «tbl.name.underscore.toUpperCase»_ID);
					«ENDIF»
					«ENDFOR»
			
					// Views
					«FOR vw : snapshot.statements.filter(typeof(CreateViewStatement))»
					matcher.addURI(authority, "«vw.name»", «vw.name.underscore.toUpperCase»);
					«IF vw.hasAndroidPrimaryKey»
					matcher.addURI(authority, "«vw.name»/*", «vw.name.underscore.toUpperCase»_ID);
					«ENDIF»
					«ENDFOR»
			
			        return matcher;
			    }
			
				@Override
				public String getType(Uri uri) {
			        final int match = sUriMatcher.match(uri);
			
					switch (match) {
					«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
					case «tbl.name.underscore.toUpperCase»:
					    return «tbl.name.pascalize».CONTENT_TYPE;
					«IF tbl.hasAndroidPrimaryKey»
					case «tbl.name.underscore.toUpperCase»_ID:
					    return «tbl.name.pascalize».ITEM_CONTENT_TYPE;
					«ENDIF»
					«ENDFOR»
					«FOR vw : snapshot.statements.filter(typeof(CreateViewStatement))»
					case «vw.name.underscore.toUpperCase»:
					    return «vw.name.pascalize».CONTENT_TYPE;
					«IF vw.hasAndroidPrimaryKey»
					case «vw.name.underscore.toUpperCase»_ID:
					    return «vw.name.pascalize».ITEM_CONTENT_TYPE;
					«ENDIF»
					«ENDFOR»
					default:
						throw new UnsupportedOperationException("Unknown uri: " + uri);
			        }
				}
			
				@Override
				public int delete(Uri uri, String selection, String[] selectionArgs) {
					final int match = sUriMatcher.match(uri);
					final SQLiteDatabase db = mOpenHelper.getWritableDatabase();
					
			        switch (match) {
					«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
					case «tbl.name.underscore.toUpperCase»: {
						int affected = db.delete(Tables.«tbl.name.underscore.toUpperCase», selection, selectionArgs);
						getContext().getContentResolver().notifyChange(uri, null);
						return affected;
					}
					«ENDFOR»
					«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
					«IF tbl.hasAndroidPrimaryKey»
					case «tbl.name.underscore.toUpperCase»_ID: {
						int affected = new SelectionQueryBuilder()
						.expr(«tbl.name.pascalize»._ID, EQ, uri.getPathSegments().get(1))
						.append(selection, selectionArgs)
						.delete(db, Tables.«tbl.name.underscore.toUpperCase»);
					
						getContext().getContentResolver().notifyChange(uri, null);
					
						return affected;
					}
					«ENDIF»
					«ENDFOR»
					default:
					    throw new UnsupportedOperationException("Unknown uri: " + uri);
			        }
				}
			
				@Override
				public Uri insert(Uri uri, ContentValues values) {
			
					final int match = sUriMatcher.match(uri);
					final SQLiteDatabase db = mOpenHelper.getWritableDatabase();
			
			        switch (match) {
					«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
					case «tbl.name.underscore.toUpperCase»: {
					    long id = db.insertOrThrow(Tables.«tbl.name.underscore.toUpperCase», null, values);
					    getContext().getContentResolver().notifyChange(uri, null);
					    return «tbl.name.pascalize».buildGetByIdUri(String.valueOf(id));
					}
					«ENDFOR»
					default:
					    throw new UnsupportedOperationException("Unknown uri: " + uri);
			        }
				}
			
				@Override
				public boolean onCreate() {
			        final Context context = getContext();
			        mOpenHelper = new «model.database.name.pascalize»OpenHelper(context);
			        return true;
				}
			
				@Override
				public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
					final int match = sUriMatcher.match(uri);
					final SQLiteDatabase db = mOpenHelper.getWritableDatabase();
					Cursor cursor = null;
			
			        switch (match) {
					«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
					case «tbl.name.underscore.toUpperCase»: {
						cursor = db.query(Tables.«tbl.name.underscore.toUpperCase», projection, selection, selectionArgs, null, null, sortOrder);
						break;
					}
					«ENDFOR»
					
					«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
					«IF tbl.hasAndroidPrimaryKey»
					case «tbl.name.underscore.toUpperCase»_ID: {
						cursor = new SelectionQueryBuilder()
						.expr(«tbl.name.pascalize»._ID, EQ, uri.getPathSegments().get(1))
						.append(selection, selectionArgs)
						.query(db, Tables.«tbl.name.underscore.toUpperCase», projection, sortOrder);
					
						break;
					}
					«ENDIF»
					«ENDFOR»
					«FOR vw : snapshot.statements.filter(typeof(CreateViewStatement))»
					case «vw.name.underscore.toUpperCase»: {
						cursor = db.query(Tables.«vw.name.underscore.toUpperCase», projection, selection, selectionArgs, null, null, sortOrder);
						break;
					}
					«ENDFOR»
					
					«FOR vw : snapshot.statements.filter(typeof(CreateViewStatement))»
					«IF vw.hasAndroidPrimaryKey»
					case «vw.name.underscore.toUpperCase»_ID: {
						cursor = new SelectionQueryBuilder()
						.expr(«vw.name.pascalize»._ID, EQ, uri.getPathSegments().get(1))
						.append(selection, selectionArgs)
						.query(db, Tables.«vw.name.underscore.toUpperCase», projection, sortOrder);
					
						break;
					}
					«ENDIF»
					«ENDFOR»
				        default:
				            throw new UnsupportedOperationException("Unknown uri: " + uri);
			        }
			
					cursor.setNotificationUri(getContext().getContentResolver(), uri);
			
					return cursor;
				}
			
				@Override
				public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
					final int match = sUriMatcher.match(uri);
					final SQLiteDatabase db = mOpenHelper.getWritableDatabase();
					
			        switch (match) {
					«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
					case «tbl.name.underscore.toUpperCase»: {
						int affected = db.update(Tables.«tbl.name.underscore.toUpperCase», values, selection, selectionArgs);
						getContext().getContentResolver().notifyChange(uri, null);
						return affected;
					}
					«ENDFOR»
					«FOR tbl : snapshot.statements.filter(typeof(CreateTableStatement))»
					«IF(tbl.hasAndroidPrimaryKey)»
					case «tbl.name.underscore.toUpperCase»_ID: {
						int affected = new SelectionQueryBuilder()
						.expr(«tbl.name.pascalize»._ID, EQ, uri.getPathSegments().get(1))
						.append(selection, selectionArgs)
						.update(db, Tables.«tbl.name.underscore.toUpperCase», values);
					
						getContext().getContentResolver().notifyChange(uri, null);
					
						return affected;
					}
					«ENDIF»
					«ENDFOR»
				        default:
				            throw new UnsupportedOperationException("Unknown uri: " + uri);
			        }
				}
			
			    @Override
			    public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations)
			            throws OperationApplicationException {
			        final SQLiteDatabase db = mOpenHelper.getWritableDatabase();
			        db.beginTransaction();
			        try {
			            final int numOperations = operations.size();
			            final ContentProviderResult[] results = new ContentProviderResult[numOperations];
			            for (int i = 0; i < numOperations; i++) {
			                results[i] = operations.get(i).apply(this, results, i);
			            }
			            db.setTransactionSuccessful();
			            return results;
			        } finally {
			            db.endTransaction();
			        }
			    }
			}
			'''
			
		def CharSequence generateStub(Model model, MigrationBlock snapshot) '''
			/*******************************************************************************
			 * Copyright (c) 2012, Robotoworks Limited
			 * All rights reserved. This program and the accompanying materials
			 * are made available under the terms of the Eclipse Public License v1.0
			 * which accompanies this distribution, and is available at
			 * http://www.eclipse.org/legal/epl-v10.html
			 * 
			 *******************************************************************************/
			package «model.packageName»;
			
			import «model.packageName».Abstract«model.database.name.pascalize»ContentProvider;
			
			public class «model.database.name.pascalize»ContentProvider extends Abstract«model.database.name.pascalize»ContentProvider {}
		'''
}