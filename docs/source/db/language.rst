Defining Databases
==================
The Mechanoid DB language supports most of the SQL grammar for Sqlite, if you 
know SQL then you know most of Mechanoid DB.

Additionally, Mechanoid DB has its own language grammar mainly for defining
structure, such as for schema migrations using the **migration** keyword.

.. note:: 
   Although Mechanoid DB uses the Sqlite syntax, all keywords in 
   Mechanoid DB are lower cased, for instance use the keyword **select** instead
   of **SELECT**

Each time you modify a Mechanoid DB File, such as adding new migrations and
statements, corresponding code is generated that makes up the generated
Content Provider API for your database.

Detailed usage of the generated API is dedicated to the Using the API, this 
topic will focus on the Mechanoid DB grammar, and refer to examples of generated 
code where it seems appropriate.

The Mechanoid DB File
---------------------
To define a database, we need to create a Mechanoid DB File.

A Mechanoid DB File has the ``mechdb`` extension, for instance 
``recipes.mechdb``, the file can be created in Eclipse using the Mechanoid DB Wizard.

In Eclipse, there are several ways to start a wizard, one way is to right click
(or CTRL + Click on Mac) on an item in Package Explorer, then choose 
``New > Other > Mechanoid > Mechanoid DB File``, the Mechanoid DB File Wizard
will launch.

.. figure:: /images/mechdb-wizard.png

The following should be considered when providing values for the wizard.

* **Folder** is where you want to create the file typically /project/models is 
  a good place to keep your Mechanoid Files.
* **Package** is where you want to generate the code, all code will be generated 
  to the given java package.
* **Name** is the name of your sqlite database, this name will be used for 
  your generated SqliteOpenHelper.

Once completing the wizard, a new file will be created, the contents will
contain an empty definition of a database with a single migration.

.. code-block:: mechdb
   
   package com.example.recipes.content
   
   database RecipesDB {
      migration {
         
      }
   }


.. todo:: link to migrations topic

The Database Definition
-----------------------
In mechdb file, we define a single database block as follows.

.. code-block:: mechdb

   database RecipesDB {
      migration {
         
      }
   }
   
A database block can contain many migrations, a migration represents a schema
change from one migration to another, a migration can contain many statements,
such as create table statements, views and triggers.

.. rubric:: The generated code

When editing and saving mechdb files, code is generated, given a database
with the name of RecipesDB, as in the above example, the following code is
generated.

* ``RecipesDBContract`` which contains constants for table and view columns, 
  Content URI constants for use with the generated content provider, and 
  convenience methods and builders.
* A user editable ``RecipesDBContentProvider``, and a base 
  ``AbstractRecipesDBContentProvider`` that contains the generated logic
  to access your database
* A user editable ``RecipesDBOpenHelper``, and a base ``AbstractRecipesDBOpenHelper``
  that contains all the generated code that creates your database from one
  version to the next

.. tip:: 

   Code that should not be edited is generated by default to the **src-gen** folder.
   Code that can be edited with by generated by default to the **src** folder.

Defining Tables
---------------
In Mechanoid DB, we define our data model using tables, in the same way we
do with Sqlite, the following example shows how to define a table.

.. code-block:: mechdb
   
   package com.example.recipes.content
   
   database RecipesDB {
      migration {
         create table recipes (
            _id integer primary key autoincrement,
            title text,
            description text
         );
      }
   }
   
.. rubric:: The generated code

For each table, a corresponding class of the same name is generated into a 
contract class, for instance into the ``RecipesDBContract`` contract, such as 
column constants and other helpful code such as record builders:-

.. code-block:: java

   //
   // We can create new recipes with the generated recipes builder
   //
   Uri omletteUri = Recipes.newBuilder()
        .setTitle("Omelette")
        .setDescription("Wonderful omelette with cheese")
        .insert();
   
.. todo:: Link to topic describing usage of generated code
   
   
Altering Tables
---------------
Sqlite allows us to change the name of tables, or add new columns. The following
example shows how we can do this.

.. code-block:: mechdb
   
   migration {
   
      alter table recipes rename to formulas;
      
      alter table formulas add column magic_words text;
      
   }
   
.. caution:: 

   Changing the names of tables will also change the name in the generate code.
   
   For instance if you referenced the generated ``Recipes`` class anywhere in your 
   code, the code will fail to compile if you renamed it to ``Formulas``.