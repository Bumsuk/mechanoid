/*
* generated by Xtext
*/
grammar InternalSqliteModel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.robotoworks.mechanoid.sqlite.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.robotoworks.mechanoid.sqlite.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.robotoworks.mechanoid.sqlite.services.SqliteModelGrammarAccess;

}

@parser::members {

 	private SqliteModelGrammarAccess grammarAccess;
 	
    public InternalSqliteModelParser(TokenStream input, SqliteModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SqliteModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPackageNameFQNParserRuleCall_1_0()); 
	    }
		lv_packageName_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"packageName",
        		lv_packageName_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDatabaseDatabaseBlockParserRuleCall_2_0()); 
	    }
		lv_database_2_0=ruleDatabaseBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"database",
        		lv_database_2_0, 
        		"DatabaseBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDatabaseBlock
entryRuleDatabaseBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseBlockRule()); }
	 iv_ruleDatabaseBlock=ruleDatabaseBlock 
	 { $current=$iv_ruleDatabaseBlock.current; } 
	 EOF 
;

// Rule DatabaseBlock
ruleDatabaseBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='database' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDatabaseBlockAccess().getDatabaseKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDatabaseBlockAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDatabaseBlockAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabaseBlockAccess().getMigrationsMigrationBlockParserRuleCall_3_0()); 
	    }
		lv_migrations_3_0=ruleMigrationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabaseBlockRule());
	        }
       		add(
       			$current, 
       			"migrations",
        		lv_migrations_3_0, 
        		"MigrationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDatabaseBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMigrationBlock
entryRuleMigrationBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMigrationBlockRule()); }
	 iv_ruleMigrationBlock=ruleMigrationBlock 
	 { $current=$iv_ruleMigrationBlock.current; } 
	 EOF 
;

// Rule MigrationBlock
ruleMigrationBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMigrationBlockAccess().getMigrationBlockAction_0(),
            $current);
    }
)	otherlv_1='migration' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMigrationBlockAccess().getMigrationKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMigrationBlockAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMigrationBlockAccess().getStatementsStatmentParserRuleCall_3_0_0()); 
	    }
		lv_statements_3_0=ruleStatment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMigrationBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"Statment");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMigrationBlockAccess().getSemicolonKeyword_3_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMigrationBlockAccess().getStatementsStatmentParserRuleCall_3_2_0_0()); 
	    }
		lv_statements_5_0=ruleStatment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMigrationBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"Statment");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMigrationBlockAccess().getSemicolonKeyword_3_2_1());
    }
)*)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMigrationBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrExprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getPrimaryComparisonParserRuleCall_0()); 
    }
    this_PrimaryComparison_0=rulePrimaryComparison
    { 
        $current = $this_PrimaryComparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndExprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightPrimaryComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimaryComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PrimaryComparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimaryComparison
entryRulePrimaryComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryComparisonRule()); }
	 iv_rulePrimaryComparison=rulePrimaryComparison 
	 { $current=$iv_rulePrimaryComparison.current; } 
	 EOF 
;

// Rule PrimaryComparison
rulePrimaryComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryComparisonAccess().getSecondaryComparisonParserRuleCall_0()); 
    }
    this_SecondaryComparison_0=ruleSecondaryComparison
    { 
        $current = $this_SecondaryComparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPrimaryComparisonAccess().getPrimaryComparisonExprLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryComparisonAccess().getOpSecondaryComparisonOpParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleSecondaryComparisonOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryComparisonRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"SecondaryComparisonOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryComparisonAccess().getRightSecondaryComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSecondaryComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SecondaryComparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSecondaryComparison
entryRuleSecondaryComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSecondaryComparisonRule()); }
	 iv_ruleSecondaryComparison=ruleSecondaryComparison 
	 { $current=$iv_ruleSecondaryComparison.current; } 
	 EOF 
;

// Rule SecondaryComparison
ruleSecondaryComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSecondaryComparisonAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSecondaryComparisonAccess().getSecondaryComparisonExprLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSecondaryComparisonAccess().getOpPrimaryComparisonOpParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=rulePrimaryComparisonOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSecondaryComparisonRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"PrimaryComparisonOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSecondaryComparisonAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSecondaryComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getColumnLiteralAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNameFQNParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getLiteralAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralValueLiteralValueParserRuleCall_1_1_0()); 
	    }
		lv_literalValue_3_0=ruleLiteralValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"literalValue",
        		lv_literalValue_3_0, 
        		"LiteralValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOrParserRuleCall_2_1()); 
    }
    this_Or_5=ruleOr
    { 
        $current = $this_Or_5.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2());
    }
))
;





// Entry rule entryRulePrimaryComparisonOp
entryRulePrimaryComparisonOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryComparisonOpRule()); } 
	 iv_rulePrimaryComparisonOp=rulePrimaryComparisonOp 
	 { $current=$iv_rulePrimaryComparisonOp.current.getText(); }  
	 EOF 
;

// Rule PrimaryComparisonOp
rulePrimaryComparisonOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getEqualsSignEqualsSignKeyword_1()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getExclamationMarkEqualsSignKeyword_2()); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getLessThanSignGreaterThanSignKeyword_3()); 
    }

    |
	kw='is' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getIsKeyword_4()); 
    }

    |
	kw='is not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getIsNotKeyword_5()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getInKeyword_6()); 
    }

    |
	kw='like' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getLikeKeyword_7()); 
    }

    |
	kw='glob' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getGlobKeyword_8()); 
    }

    |
	kw='match' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getMatchKeyword_9()); 
    }

    |
	kw='regexp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryComparisonOpAccess().getRegexpKeyword_10()); 
    }
)
    ;





// Entry rule entryRuleSecondaryComparisonOp
entryRuleSecondaryComparisonOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSecondaryComparisonOpRule()); } 
	 iv_ruleSecondaryComparisonOp=ruleSecondaryComparisonOp 
	 { $current=$iv_ruleSecondaryComparisonOp.current.getText(); }  
	 EOF 
;

// Rule SecondaryComparisonOp
ruleSecondaryComparisonOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSecondaryComparisonOpAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSecondaryComparisonOpAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSecondaryComparisonOpAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSecondaryComparisonOpAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleStatment
entryRuleStatment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatmentRule()); }
	 iv_ruleStatment=ruleStatment 
	 { $current=$iv_ruleStatment.current; } 
	 EOF 
;

// Rule Statment
ruleStatment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatmentAccess().getCreateTableStatementAction_0_0(),
            $current);
    }
)	otherlv_1='create' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatmentAccess().getCreateKeyword_0_1());
    }
	otherlv_2='table' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatmentAccess().getTableKeyword_0_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getStatmentAccess().getNameIDTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatmentAccess().getLeftParenthesisKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatmentAccess().getColumnDefsColumnDefParserRuleCall_0_5_0()); 
	    }
		lv_columnDefs_5_0=ruleColumnDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatmentRule());
	        }
       		add(
       			$current, 
       			"columnDefs",
        		lv_columnDefs_5_0, 
        		"ColumnDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatmentAccess().getCommaKeyword_0_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatmentAccess().getColumnDefsColumnDefParserRuleCall_0_6_1_0()); 
	    }
		lv_columnDefs_7_0=ruleColumnDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatmentRule());
	        }
       		add(
       			$current, 
       			"columnDefs",
        		lv_columnDefs_7_0, 
        		"ColumnDef");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatmentAccess().getCommaKeyword_0_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatmentAccess().getConstraintsTableConstraintParserRuleCall_0_7_1_0()); 
	    }
		lv_constraints_9_0=ruleTableConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatmentRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_9_0, 
        		"TableConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStatmentAccess().getRightParenthesisKeyword_0_8());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatmentAccess().getAlterTableStatementAction_1_0(),
            $current);
    }
)	otherlv_12='alter' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStatmentAccess().getAlterKeyword_1_1());
    }
	otherlv_13='table' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStatmentAccess().getTableKeyword_1_2());
    }
(
(
		lv_name_14_0=RULE_ID
		{
			newLeafNode(lv_name_14_0, grammarAccess.getStatmentAccess().getNameIDTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_14_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatmentAccess().getClauseAlterTableClauseParserRuleCall_1_4_0()); 
	    }
		lv_clause_15_0=ruleAlterTableClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatmentRule());
	        }
       		set(
       			$current, 
       			"clause",
        		lv_clause_15_0, 
        		"AlterTableClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatmentAccess().getCreateViewStatementAction_2_0(),
            $current);
    }
)	otherlv_17='create' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStatmentAccess().getCreateKeyword_2_1());
    }
	otherlv_18='view' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getStatmentAccess().getViewKeyword_2_2());
    }
(
(
		lv_name_19_0=RULE_ID
		{
			newLeafNode(lv_name_19_0, grammarAccess.getStatmentAccess().getNameIDTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_19_0, 
        		"ID");
	    }

)
)	otherlv_20='as' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getStatmentAccess().getAsKeyword_2_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatmentAccess().getSelectStatementSelectStatementParserRuleCall_2_5_0()); 
	    }
		lv_selectStatement_21_0=ruleSelectStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatmentRule());
	        }
       		set(
       			$current, 
       			"selectStatement",
        		lv_selectStatement_21_0, 
        		"SelectStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;







// Entry rule entryRuleAlterTableClause
entryRuleAlterTableClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlterTableClauseRule()); }
	 iv_ruleAlterTableClause=ruleAlterTableClause 
	 { $current=$iv_ruleAlterTableClause.current; } 
	 EOF 
;

// Rule AlterTableClause
ruleAlterTableClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAlterTableClauseAccess().getAlterTableRenameClauseAction_0_0(),
            $current);
    }
)	otherlv_1='rename to' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAlterTableClauseAccess().getRenameToKeyword_0_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAlterTableClauseAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAlterTableClauseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAlterTableClauseAccess().getAlterTableAddColumnClauseAction_1_0(),
            $current);
    }
)	otherlv_4='add column' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAlterTableClauseAccess().getAddColumnKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlterTableClauseAccess().getColumnDefColumnDefParserRuleCall_1_2_0()); 
	    }
		lv_columnDef_5_0=ruleColumnDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlterTableClauseRule());
	        }
       		set(
       			$current, 
       			"columnDef",
        		lv_columnDef_5_0, 
        		"ColumnDef");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleColumnDef
entryRuleColumnDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnDefRule()); }
	 iv_ruleColumnDef=ruleColumnDef 
	 { $current=$iv_ruleColumnDef.current; } 
	 EOF 
;

// Rule ColumnDef
ruleColumnDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getColumnDefAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnDefAccess().getTypeColumnTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleColumnType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ColumnType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnDefAccess().getConstraintsColumnConstraintParserRuleCall_2_0()); 
	    }
		lv_constraints_2_0=ruleColumnConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnDefRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_2_0, 
        		"ColumnConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleColumnConstraint
entryRuleColumnConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnConstraintRule()); }
	 iv_ruleColumnConstraint=ruleColumnConstraint 
	 { $current=$iv_ruleColumnConstraint.current; } 
	 EOF 
;

// Rule ColumnConstraint
ruleColumnConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getColumnConstraintAccess().getPrimaryKeyColumnConstraintAction_0_0(),
            $current);
    }
)	otherlv_1='primary' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getColumnConstraintAccess().getPrimaryKeyword_0_1());
    }
	otherlv_2='key' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getColumnConstraintAccess().getKeyKeyword_0_2());
    }
((
(
		lv_asc_3_0=	'asc' 
    {
        newLeafNode(lv_asc_3_0, grammarAccess.getColumnConstraintAccess().getAscAscKeyword_0_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnConstraintRule());
	        }
       		setWithLastConsumed($current, "asc", true, "asc");
	    }

)
)
    |(
(
		lv_desc_4_0=	'desc' 
    {
        newLeafNode(lv_desc_4_0, grammarAccess.getColumnConstraintAccess().getDescDescKeyword_0_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnConstraintRule());
	        }
       		setWithLastConsumed($current, "desc", true, "desc");
	    }

)
))?(
(
		lv_autoincrement_5_0=	'autoincrement' 
    {
        newLeafNode(lv_autoincrement_5_0, grammarAccess.getColumnConstraintAccess().getAutoincrementAutoincrementKeyword_0_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnConstraintRule());
	        }
       		setWithLastConsumed($current, "autoincrement", true, "autoincrement");
	    }

)
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getColumnConstraintAccess().getNotNullConstraintAction_1_0(),
            $current);
    }
)	otherlv_7='not' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getColumnConstraintAccess().getNotKeyword_1_1());
    }
	otherlv_8='null' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getColumnConstraintAccess().getNullKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnConstraintAccess().getConflictClauseConflictClauseParserRuleCall_1_3_0()); 
	    }
		lv_conflictClause_9_0=ruleConflictClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnConstraintRule());
	        }
       		set(
       			$current, 
       			"conflictClause",
        		lv_conflictClause_9_0, 
        		"ConflictClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getColumnConstraintAccess().getDefaultConstraintAction_2_0(),
            $current);
    }
)	otherlv_11='default' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getColumnConstraintAccess().getDefaultKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnConstraintAccess().getDefaultValueDefaultValueParserRuleCall_2_2_0()); 
	    }
		lv_defaultValue_12_0=ruleDefaultValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnConstraintRule());
	        }
       		set(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_12_0, 
        		"DefaultValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleDefaultValue
entryRuleDefaultValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultValueRule()); }
	 iv_ruleDefaultValue=ruleDefaultValue 
	 { $current=$iv_ruleDefaultValue.current; } 
	 EOF 
;

// Rule DefaultValue
ruleDefaultValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefaultValueAccess().getLiteralDefaultValueAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultValueAccess().getLiteralLiteralValueParserRuleCall_0_1_0()); 
	    }
		lv_literal_1_0=ruleLiteralValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultValueRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"LiteralValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefaultValueAccess().getExpressionDefaultValueAction_1_0(),
            $current);
    }
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefaultValueAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultValueAccess().getExpressionOrParserRuleCall_1_2_0()); 
	    }
		lv_expression_4_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultValueRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDefaultValueAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleTableConstraint
entryRuleTableConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTableConstraintRule()); }
	 iv_ruleTableConstraint=ruleTableConstraint 
	 { $current=$iv_ruleTableConstraint.current; } 
	 EOF 
;

// Rule TableConstraint
ruleTableConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTableConstraintAccess().getUniqueTableContraintParserRuleCall()); 
    }
    this_UniqueTableContraint_0=ruleUniqueTableContraint
    { 
        $current = $this_UniqueTableContraint_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleUniqueTableContraint
entryRuleUniqueTableContraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUniqueTableContraintRule()); }
	 iv_ruleUniqueTableContraint=ruleUniqueTableContraint 
	 { $current=$iv_ruleUniqueTableContraint.current; } 
	 EOF 
;

// Rule UniqueTableContraint
ruleUniqueTableContraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='unique' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUniqueTableContraintAccess().getUniqueKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUniqueTableContraintAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUniqueTableContraintAccess().getColumnsIndexedColumnParserRuleCall_2_0()); 
	    }
		lv_columns_2_0=ruleIndexedColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUniqueTableContraintRule());
	        }
       		add(
       			$current, 
       			"columns",
        		lv_columns_2_0, 
        		"IndexedColumn");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUniqueTableContraintAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUniqueTableContraintAccess().getColumnsIndexedColumnParserRuleCall_3_1_0()); 
	    }
		lv_columns_4_0=ruleIndexedColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUniqueTableContraintRule());
	        }
       		add(
       			$current, 
       			"columns",
        		lv_columns_4_0, 
        		"IndexedColumn");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUniqueTableContraintAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUniqueTableContraintAccess().getConflictClauseConflictClauseParserRuleCall_5_0()); 
	    }
		lv_conflictClause_6_0=ruleConflictClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUniqueTableContraintRule());
	        }
       		set(
       			$current, 
       			"conflictClause",
        		lv_conflictClause_6_0, 
        		"ConflictClause");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIndexedColumn
entryRuleIndexedColumn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexedColumnRule()); }
	 iv_ruleIndexedColumn=ruleIndexedColumn 
	 { $current=$iv_ruleIndexedColumn.current; } 
	 EOF 
;

// Rule IndexedColumn
ruleIndexedColumn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexedColumnRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getIndexedColumnAccess().getNameColumnDefCrossReference_0_0()); 
	}

)
)((
(
		lv_asc_1_0=	'asc' 
    {
        newLeafNode(lv_asc_1_0, grammarAccess.getIndexedColumnAccess().getAscAscKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexedColumnRule());
	        }
       		setWithLastConsumed($current, "asc", true, "asc");
	    }

)
)
    |(
(
		lv_desc_2_0=	'desc' 
    {
        newLeafNode(lv_desc_2_0, grammarAccess.getIndexedColumnAccess().getDescDescKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexedColumnRule());
	        }
       		setWithLastConsumed($current, "desc", true, "desc");
	    }

)
))?)
;





// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	 iv_ruleSelectStatement=ruleSelectStatement 
	 { $current=$iv_ruleSelectStatement.current; } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectStatementAccess().getCoreSelectCoreParserRuleCall_0()); 
	    }
		lv_core_0_0=ruleSelectCore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectStatementRule());
	        }
       		set(
       			$current, 
       			"core",
        		lv_core_0_0, 
        		"SelectCore");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSelectCore
entryRuleSelectCore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectCoreRule()); }
	 iv_ruleSelectCore=ruleSelectCore 
	 { $current=$iv_ruleSelectCore.current; } 
	 EOF 
;

// Rule SelectCore
ruleSelectCore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectCoreAccess().getSelectKeyword_0());
    }
((
(
		lv_distinct_1_0=	'distinct' 
    {
        newLeafNode(lv_distinct_1_0, grammarAccess.getSelectCoreAccess().getDistinctDistinctKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectCoreRule());
	        }
       		setWithLastConsumed($current, "distinct", true, "distinct");
	    }

)
)
    |(
(
		lv_all_2_0=	'all' 
    {
        newLeafNode(lv_all_2_0, grammarAccess.getSelectCoreAccess().getAllAllKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectCoreRule());
	        }
       		setWithLastConsumed($current, "all", true, "all");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectCoreAccess().getResultColumnsResultColumnParserRuleCall_2_0()); 
	    }
		lv_resultColumns_3_0=ruleResultColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectCoreRule());
	        }
       		add(
       			$current, 
       			"resultColumns",
        		lv_resultColumns_3_0, 
        		"ResultColumn");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectCoreAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectCoreAccess().getResultColumnsResultColumnParserRuleCall_3_1_0()); 
	    }
		lv_resultColumns_5_0=ruleResultColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectCoreRule());
	        }
       		add(
       			$current, 
       			"resultColumns",
        		lv_resultColumns_5_0, 
        		"ResultColumn");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_6='from' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelectCoreAccess().getFromKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectCoreAccess().getSourceJoinSourceParserRuleCall_4_1_0()); 
	    }
		lv_source_7_0=ruleJoinSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectCoreRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_7_0, 
        		"JoinSource");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleJoinSource
entryRuleJoinSource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJoinSourceRule()); }
	 iv_ruleJoinSource=ruleJoinSource 
	 { $current=$iv_ruleJoinSource.current; } 
	 EOF 
;

// Rule JoinSource
ruleJoinSource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJoinSourceAccess().getSourceSingleSourceParserRuleCall_0_0()); 
	    }
		lv_source_0_0=ruleSingleSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinSourceRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_0_0, 
        		"SingleSource");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinSourceAccess().getJoinStatementsJoinStatementParserRuleCall_1_0()); 
	    }
		lv_joinStatements_1_0=ruleJoinStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinSourceRule());
	        }
       		add(
       			$current, 
       			"joinStatements",
        		lv_joinStatements_1_0, 
        		"JoinStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSingleSource
entryRuleSingleSource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleSourceRule()); }
	 iv_ruleSingleSource=ruleSingleSource 
	 { $current=$iv_ruleSingleSource.current; } 
	 EOF 
;

// Rule SingleSource
ruleSingleSource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleSourceAccess().getSingleSourceTableAction_0_0(),
            $current);
    }
)(
(
		lv_tableName_1_0=RULE_ID
		{
			newLeafNode(lv_tableName_1_0, grammarAccess.getSingleSourceAccess().getTableNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleSourceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tableName",
        		lv_tableName_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSingleSourceAccess().getAsKeyword_0_2_0());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getSingleSourceAccess().getNameIDTerminalRuleCall_0_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleSourceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleSourceAccess().getSingleSourceSelectStatementAction_1_0(),
            $current);
    }
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSingleSourceAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleSourceAccess().getSelectStatementSelectStatementParserRuleCall_1_2_0()); 
	    }
		lv_selectStatement_6_0=ruleSelectStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleSourceRule());
	        }
       		set(
       			$current, 
       			"selectStatement",
        		lv_selectStatement_6_0, 
        		"SelectStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSingleSourceAccess().getRightParenthesisKeyword_1_3());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleSourceAccess().getSingleSourceJoinAction_2_0(),
            $current);
    }
)	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSingleSourceAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleSourceAccess().getJoinSourceJoinSourceParserRuleCall_2_2_0()); 
	    }
		lv_joinSource_10_0=ruleJoinSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleSourceRule());
	        }
       		set(
       			$current, 
       			"joinSource",
        		lv_joinSource_10_0, 
        		"JoinSource");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSingleSourceAccess().getRightParenthesisKeyword_2_3());
    }
))
;





// Entry rule entryRuleJoinStatement
entryRuleJoinStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJoinStatementRule()); }
	 iv_ruleJoinStatement=ruleJoinStatement 
	 { $current=$iv_ruleJoinStatement.current; } 
	 EOF 
;

// Rule JoinStatement
ruleJoinStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJoinStatementAccess().getJoinStatementAction_0(),
            $current);
    }
)(
(
		lv_natural_1_0=	'natural' 
    {
        newLeafNode(lv_natural_1_0, grammarAccess.getJoinStatementAccess().getNaturalNaturalKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinStatementRule());
	        }
       		setWithLastConsumed($current, "natural", true, "natural");
	    }

)
)?(((
(
		lv_left_2_0=	'left' 
    {
        newLeafNode(lv_left_2_0, grammarAccess.getJoinStatementAccess().getLeftLeftKeyword_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinStatementRule());
	        }
       		setWithLastConsumed($current, "left", true, "left");
	    }

)
)(
(
		lv_outer_3_0=	'outer' 
    {
        newLeafNode(lv_outer_3_0, grammarAccess.getJoinStatementAccess().getOuterOuterKeyword_2_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinStatementRule());
	        }
       		setWithLastConsumed($current, "outer", true, "outer");
	    }

)
)?)
    |(
(
		lv_inner_4_0=	'inner' 
    {
        newLeafNode(lv_inner_4_0, grammarAccess.getJoinStatementAccess().getInnerInnerKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinStatementRule());
	        }
       		setWithLastConsumed($current, "inner", true, "inner");
	    }

)
)
    |(
(
		lv_cross_5_0=	'cross' 
    {
        newLeafNode(lv_cross_5_0, grammarAccess.getJoinStatementAccess().getCrossCrossKeyword_2_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinStatementRule());
	        }
       		setWithLastConsumed($current, "cross", true, "cross");
	    }

)
))?	otherlv_6='join' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getJoinStatementAccess().getJoinKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinStatementAccess().getSingleSourceSingleSourceParserRuleCall_4_0()); 
	    }
		lv_singleSource_7_0=ruleSingleSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinStatementRule());
	        }
       		set(
       			$current, 
       			"singleSource",
        		lv_singleSource_7_0, 
        		"SingleSource");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='on' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getJoinStatementAccess().getOnKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinStatementAccess().getExpressionOrParserRuleCall_6_0()); 
	    }
		lv_expression_9_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_9_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleResultColumn
entryRuleResultColumn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResultColumnRule()); }
	 iv_ruleResultColumn=ruleResultColumn 
	 { $current=$iv_ruleResultColumn.current; } 
	 EOF 
;

// Rule ResultColumn
ruleResultColumn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResultColumnAccess().getResultColumnAllAction_0_0(),
            $current);
    }
)	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getResultColumnAccess().getAsteriskKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResultColumnAccess().getResultColumnAllWithTableRefAction_1_0(),
            $current);
    }
)(
(
		lv_tableRef_3_0=RULE_ID
		{
			newLeafNode(lv_tableRef_3_0, grammarAccess.getResultColumnAccess().getTableRefIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResultColumnRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tableRef",
        		lv_tableRef_3_0, 
        		"ID");
	    }

)
)	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getResultColumnAccess().getFullStopKeyword_1_2());
    }
	otherlv_5='*' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getResultColumnAccess().getAsteriskKeyword_1_3());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResultColumnAccess().getResultColumnExpressionAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getResultColumnAccess().getExpressionOrParserRuleCall_2_1_0()); 
	    }
		lv_expression_7_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResultColumnRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='as' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getResultColumnAccess().getAsKeyword_2_2_0());
    }
(
(
		lv_name_9_0=RULE_ID
		{
			newLeafNode(lv_name_9_0, grammarAccess.getResultColumnAccess().getNameIDTerminalRuleCall_2_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResultColumnRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"ID");
	    }

)
))?))
;





// Entry rule entryRuleConflictClause
entryRuleConflictClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConflictClauseRule()); }
	 iv_ruleConflictClause=ruleConflictClause 
	 { $current=$iv_ruleConflictClause.current; } 
	 EOF 
;

// Rule ConflictClause
ruleConflictClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConflictClauseAccess().getOnKeyword_0());
    }
	otherlv_1='conflict' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConflictClauseAccess().getConflictKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConflictClauseAccess().getResolutionConflictResolutionEnumRuleCall_2_0()); 
	    }
		lv_resolution_2_0=ruleConflictResolution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConflictClauseRule());
	        }
       		set(
       			$current, 
       			"resolution",
        		lv_resolution_2_0, 
        		"ConflictResolution");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLiteralValue
entryRuleLiteralValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralValueRule()); }
	 iv_ruleLiteralValue=ruleLiteralValue 
	 { $current=$iv_ruleLiteralValue.current; } 
	 EOF 
;

// Rule LiteralValue
ruleLiteralValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getNumericLiteralAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralValueAccess().getNumberSignedNumberParserRuleCall_0_1_0()); 
	    }
		lv_number_1_0=ruleSignedNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralValueRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_1_0, 
        		"SignedNumber");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getStringLiteralAction_1_0(),
            $current);
    }
)(
(
		lv_literal_3_0=RULE_STRING
		{
			newLeafNode(lv_literal_3_0, grammarAccess.getLiteralValueAccess().getLiteralSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"literal",
        		lv_literal_3_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getNullLiteralAction_2_0(),
            $current);
    }
)(
(
		lv_literal_5_0=	'null' 
    {
        newLeafNode(lv_literal_5_0, grammarAccess.getLiteralValueAccess().getLiteralNullKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_5_0, "null");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getCurrentTimeLiteralAction_3_0(),
            $current);
    }
)(
(
		lv_literal_7_0=	'current_time' 
    {
        newLeafNode(lv_literal_7_0, grammarAccess.getLiteralValueAccess().getLiteralCurrent_timeKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_7_0, "current_time");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getCurrentDateLiteralAction_4_0(),
            $current);
    }
)(
(
		lv_literal_9_0=	'current_date' 
    {
        newLeafNode(lv_literal_9_0, grammarAccess.getLiteralValueAccess().getLiteralCurrent_dateKeyword_4_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_9_0, "current_date");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralValueAccess().getCurrentTimeStampLiteralAction_5_0(),
            $current);
    }
)(
(
		lv_literal_11_0=	'current_time_stamp' 
    {
        newLeafNode(lv_literal_11_0, grammarAccess.getLiteralValueAccess().getLiteralCurrent_time_stampKeyword_5_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralValueRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_11_0, "current_time_stamp");
	    }

)
)))
;





// Entry rule entryRuleSignedNumber
entryRuleSignedNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedNumberRule()); } 
	 iv_ruleSignedNumber=ruleSignedNumber 
	 { $current=$iv_ruleSignedNumber.current.getText(); }  
	 EOF 
;

// Rule SignedNumber
ruleSignedNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedNumberAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_NUMBER_1=RULE_NUMBER    {
		$current.merge(this_NUMBER_1);
    }

    { 
    newLeafNode(this_NUMBER_1, grammarAccess.getSignedNumberAccess().getNUMBERTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule ColumnType
ruleColumnType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='text' 
	{
        $current = grammarAccess.getColumnTypeAccess().getTextEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getColumnTypeAccess().getTextEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='integer' 
	{
        $current = grammarAccess.getColumnTypeAccess().getIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getColumnTypeAccess().getIntegerEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='real' 
	{
        $current = grammarAccess.getColumnTypeAccess().getRealEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getColumnTypeAccess().getRealEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='blob' 
	{
        $current = grammarAccess.getColumnTypeAccess().getBlobEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getColumnTypeAccess().getBlobEnumLiteralDeclaration_3()); 
    }
));



// Rule ConflictResolution
ruleConflictResolution returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='rollback' 
	{
        $current = grammarAccess.getConflictResolutionAccess().getRollbackEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getConflictResolutionAccess().getRollbackEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='abort' 
	{
        $current = grammarAccess.getConflictResolutionAccess().getAbortEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getConflictResolutionAccess().getAbortEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='fail' 
	{
        $current = grammarAccess.getConflictResolutionAccess().getFailEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getConflictResolutionAccess().getFailEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='ignore' 
	{
        $current = grammarAccess.getConflictResolutionAccess().getIgnoreEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getConflictResolutionAccess().getIgnoreEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='replace' 
	{
        $current = grammarAccess.getConflictResolutionAccess().getReplaceEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getConflictResolutionAccess().getReplaceEnumLiteralDeclaration_4()); 
    }
));



RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_INT : '$$$don\'t use this anymore$$$';

RULE_STRING : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


