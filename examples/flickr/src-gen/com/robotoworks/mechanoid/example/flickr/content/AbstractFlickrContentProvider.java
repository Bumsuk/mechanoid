/*
 * Generated by Robotoworks Mechanoid
 */
package com.robotoworks.mechanoid.example.flickr.content;

import java.util.ArrayList;

import android.content.ContentProviderOperation;
import android.content.ContentProviderResult;
import android.content.ContentValues;
import android.content.Context;
import android.content.OperationApplicationException;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import com.robotoworks.mechanoid.sqlite.MechanoidContentProvider;
import com.robotoworks.mechanoid.sqlite.MechanoidSQLiteOpenHelper;

import com.robotoworks.mechanoid.example.flickr.content.FlickrContract.Interestingness;

import com.robotoworks.mechanoid.example.flickr.content.actions.InterestingnessActions;
import com.robotoworks.mechanoid.example.flickr.content.actions.InterestingnessByIdActions;

import com.robotoworks.mechanoid.example.flickr.content.actions.SearchInterestingessActions;

public abstract class AbstractFlickrContentProvider extends MechanoidContentProvider {

    private static final UriMatcher sUriMatcher;
	private static final String[] sContentTypes;
	private static final Class<?>[] sActions;
    
	private static final int INTERESTINGNESS = 0;
	private static final int INTERESTINGNESS_ID = 1;

	
	private static final int SEARCH_INTERESTINGESS = 2;
	public static final int NUM_URI_MATCHERS = 3;

	static {
		sUriMatcher = buildUriMatcher();
	
		sContentTypes = new String[NUM_URI_MATCHERS];

		sContentTypes[INTERESTINGNESS] = Interestingness.CONTENT_TYPE;
		sContentTypes[INTERESTINGNESS_ID] = Interestingness.ITEM_CONTENT_TYPE;
		
		sActions = new Class<?>[NUM_URI_MATCHERS];

		sActions[INTERESTINGNESS] = InterestingnessActions.class;
		sActions[INTERESTINGNESS_ID] = InterestingnessByIdActions.class;
		
		sActions[SEARCH_INTERESTINGESS] = SearchInterestingessActions.class;
		
	}
	
    private static UriMatcher buildUriMatcher() {
        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);
        final String authority = FlickrContract.CONTENT_AUTHORITY;

		// Tables
		matcher.addURI(authority, "interestingness", INTERESTINGNESS);
		matcher.addURI(authority, "interestingness/#", INTERESTINGNESS_ID);

		// Views

		// User Actions
		matcher.addURI(authority, "interestingness/search_suggest_query", SEARCH_INTERESTINGESS); 
        return matcher;
    }

	@Override
	public String getType(Uri uri) {
        final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		return sContentTypes[match];
	}

	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs) {
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		return createActions(sActions[match]).delete(this, uri, selection, selectionArgs);
	}

	@Override
	public Uri insert(Uri uri, ContentValues values) {

		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		return createActions(sActions[match]).insert(this, uri, values);
	}

	@Override
	protected MechanoidSQLiteOpenHelper createOpenHelper(Context context) {
        return new FlickrOpenHelper(context);
	}

	@Override
	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		Cursor cursor = createActions(sActions[match]).query(this, uri, projection, selection, selectionArgs, sortOrder);

		if(cursor != null) {
			cursor.setNotificationUri(getContext().getContentResolver(), uri);
		}
		
		return cursor;
	}

	@Override
	public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
		final int match = sUriMatcher.match(uri);

		if(match == UriMatcher.NO_MATCH) {
			throw new UnsupportedOperationException("Unknown uri: " + uri);
		}
		
		return createActions(sActions[match]).update(this, uri, values, selection, selectionArgs);
	}

    @Override
    public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations)
            throws OperationApplicationException {
        final SQLiteDatabase db = getOpenHelper().getWritableDatabase();
        db.beginTransaction();
        try {
            final int numOperations = operations.size();
            final ContentProviderResult[] results = new ContentProviderResult[numOperations];
            for (int i = 0; i < numOperations; i++) {
                results[i] = operations.get(i).apply(this, results, i);
            }
            db.setTransactionSuccessful();
            return results;
        } finally {
            db.endTransaction();
        }
    }
}
