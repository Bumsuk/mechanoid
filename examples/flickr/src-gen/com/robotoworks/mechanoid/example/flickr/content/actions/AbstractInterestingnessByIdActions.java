/*
 * Generated by Robotoworks Mechanoid
 */
package com.robotoworks.mechanoid.example.flickr.content.actions;

import android.content.ContentValues;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.Cursor;
import android.net.Uri;
import com.robotoworks.mechanoid.sqlite.ContentProviderActions;
import com.robotoworks.mechanoid.sqlite.MechanoidContentProvider;
import com.robotoworks.mechanoid.sqlite.SelectionQueryBuilder;
import static com.robotoworks.mechanoid.sqlite.SelectionQueryBuilder.Op.*;

import com.robotoworks.mechanoid.example.flickr.content.AbstractFlickrOpenHelper.Tables;
import com.robotoworks.mechanoid.example.flickr.content.FlickrContract.Interestingness;
			
public abstract class AbstractInterestingnessByIdActions extends ContentProviderActions {
	@Override
	public int delete(MechanoidContentProvider provider, Uri uri, String selection, String[] selectionArgs){
		
		
		final SQLiteDatabase db = provider.getOpenHelper().getWritableDatabase();
		final Context context = provider.getContext();
		
		int affected = new SelectionQueryBuilder()
		.expr(Interestingness._ID, EQ, uri.getPathSegments().get(1))
		.append(selection, selectionArgs)
		.delete(db, Tables.INTERESTINGNESS);
		
		context.getContentResolver().notifyChange(uri, null);
		
		return affected;
	}
	
	@Override
	public Uri insert(MechanoidContentProvider provider, Uri uri, ContentValues values){
		return null; // Cannot insert on _id
	}
	
	@Override
	public int update(MechanoidContentProvider provider, Uri uri, ContentValues values, String selection, String[] selectionArgs){
		final SQLiteDatabase db = provider.getOpenHelper().getWritableDatabase();
		final Context context = provider.getContext();
		
		int affected = new SelectionQueryBuilder()
		.expr(Interestingness._ID, EQ, uri.getPathSegments().get(1))
		.append(selection, selectionArgs)
		.update(db, Tables.INTERESTINGNESS, values);
		
		context.getContentResolver().notifyChange(uri, null);
		
		return affected;
	}

	@Override
	public Cursor query(MechanoidContentProvider provider, Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder){
		final SQLiteDatabase db = provider.getOpenHelper().getWritableDatabase();
		
		return new SelectionQueryBuilder()
		.expr(Interestingness._ID, EQ, uri.getPathSegments().get(1))
		.append(selection, selectionArgs)
		.query(db, Tables.INTERESTINGNESS, projection, sortOrder);
	}
}
